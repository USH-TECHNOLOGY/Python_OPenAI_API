from dotenv import load_dotenv
import os
import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain.llms import OpenAI
from langchain.callbacks import get_openai_callback

def save_uploaded_file(uploaded_file):
    # Define path to save the uploaded file
    base_path = "uploaded_pdfs"
    file_path = os.path.join(base_path, uploaded_file.name)

    # Check if file already exists. If it does, add a suffix to avoid overwriting
    count = 1
    while os.path.exists(file_path):
        file_path = os.path.join(base_path, f"{count}_{uploaded_file.name}")
        count += 1

    # Write the uploaded file to the defined path
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getvalue())

    return file_path  # Return path to the saved file

def main():
    load_dotenv()
    st.set_page_config(page_title ="Ask your PDF")
    st.header("Ask your PDF")

    # Uploading File
    pdf = st.file_uploader("Upload your PDF", type="pdf")

    if pdf is not None:
        # Save the uploaded PDF locally
        saved_path = save_uploaded_file(pdf)
        st.write(f"File saved at: {saved_path}")

        # Read the saved PDF file
        with open(saved_path, "rb") as f:
            pdf_reader = PdfReader(f)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text()

            # Split into chunks
            text_splitter = CharacterTextSplitter(
                separator="\n",  # There was a typo here as well
                chunk_size=1000,
                chunk_overlap=200,
                length_function=len
            )
            chunks = text_splitter.split_text(text)

            # Create Embeddings
            embeddings = OpenAIEmbeddings()
            knowledge_base = FAISS.from_texts(chunks, embeddings)
    
            # Show User Input
            user_question = st.text_input("Ask a question about your pdf")
            if user_question:
                docs = knowledge_base.similarity_search(user_question)

                llm = OpenAI()
                chain = load_qa_chain(llm, chain_type="stuff")
                response = chain.run(input_documents=docs, question=user_question)

                st.write(response)

if __name__ == '__main__':
    main()
